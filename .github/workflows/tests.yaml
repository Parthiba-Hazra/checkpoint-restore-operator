name: Build and Deploy

on: [push, pull_request]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      CHECKPOINT_DIR: /var/lib/kubelet/checkpoints
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Install dependencies
        run: |
          # Install bats
          sudo apt-get update
          sudo apt-get install -y bats
          sudo chmod +x "$(which bats)"

          # Install kind
          curl -sLo kind "$(curl -sL https://api.github.com/repos/kubernetes-sigs/kind/releases/latest | jq -r '[.assets[] | select(.name == "kind-linux-amd64")] | first | .browser_download_url')"
          chmod +x kind
          sudo mv kind /bin/

          # Install kubectl
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /bin/

      - name: Prepare Checkpoints Directory in Host
        run: |
          sudo mkdir -p ${{ env.CHECKPOINT_DIR }}
          sudo chmod 700 ${{ env.CHECKPOINT_DIR }}

      - name: Generate Checkpoint Tar Files
        run: ./test/generate_checkpoint_tar.sh

      - name: Create Kubernetes cluster
        run: kind create cluster --config=./test/kind-config.yaml

      - name: Load Docker image into kind cluster
        run: |
          make docker-build IMG=checkpoint-restore-operator:ci
          kind load docker-image checkpoint-restore-operator:ci

      - name: Deploy to Kubernetes
        run: |
          make install
          make deploy IMG=checkpoint-restore-operator:ci

      - name: Wait for deployments to be ready
        run: ./test/wait_for_deployment.sh checkpoint-restore-operator-controller-manager

      - name: Check resources
        run: kubectl get all -n checkpoint-restore-operator-system

      - name: Test Garbage Collection
        run: bats -f "test_garbage_collection" ./test/run_tests.bats

      - name: Test Max Checkpoints Set to 0
        run: bats -f "test_max_checkpoints_set_to_0" ./test/run_tests.bats

      - name: Test Max Checkpoints Set to 1
        run: bats -f "test_max_checkpoints_set_to_1" ./test/run_tests.bats

      - name: Test Max Total Checkpoint Size
        run: bats -f "test_max_total_checkpoint_size" ./test/run_tests.bats

      - name: Test Max Checkpoint Size
        run: bats -f "test_max_checkpoint_size" ./test/run_tests.bats
